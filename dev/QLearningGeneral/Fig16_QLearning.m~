clear;
%% Definimos la discretizacion del estado
Nxl = 80;
Nvl = 80;
Nal = 3;

xlmin = -6;  xlmax = 6;
xl = linspace(xlmin,xlmax,Nxl);
%
vlmin = -6;  vlmax = 6;
vl = linspace(vlmin,vlmax,Nvl);
%
almin = -5; almax = 5;
al = linspace(almin,almax,Nal);
al = [0 almin almax];
%% discretizacion en tiempo
T = 10;
tspan = linspace(0,T,200);
dt = tspan(2) - tspan(1);
%% Definimos la forma del potencial
gs = @(x,x0,sigma) exp(-(x-x0).^2/sigma^2);
%
Vpot = @(x) 3*gs(x,0,1) - gs(x,0,4) - 10*gs(x,0,2) - 2*gs(x,-2,1) - 2*gs(x,2,1) ;

%%
% calculamos el menos gradiente del potencial mediante calculo simbolico
syms xsym 
Force_sym = -gradient(Vpot(xsym),xsym);
Force = matlabFunction(Force_sym,'Vars',xsym);
% Construimos la funcion de la dinamica
f_x = @(x,v,a)  v  ;
f_v = @(x,v,a)  Force(x)  - 0.5*v+ a  ;
          
%% Construimos el control óptimo LQR de este sistema
% linearizado en el punto de [0,0];c
f = @(s,a) [f_x(s(1),s(2),a) ; ...
            f_v(s(1),s(2),a) ];

%%
QLearning(f,vl,xl,al,dt,100);

%%
fig = figure(1);
clf
subplot(2,1,1)
plot(xl,Vpot(xl))
xlim([xl(1) xl(end)])
  
Vpotline = Vpot(xl);
ylim([min(Vpotline) max(Vpotline)])

hold on 

iplot = plot(0,Vpot(0),'Marker','.','Color','r','MarkerSize',30);
ylim([-9 0])
%%
[vms2,ams2,xms2] = meshgrid(vl,al,xl);
Q = 10*Rfcn(xms2,vms2,ams2);
%%
[xms,vms] = meshgrid(xl,vl);
  
[W,pi] = max(Q);
W  = reshape(W,Nvl,Nxl);
pi = reshape(pi,Nvl,Nxl);

ax_V = subplot(1,3,1);
isurf = surf(xms,vms,W,'Parent',ax_V);
view(0,90)
title('Función Valor')
shading interp
colorbar

ax_pi = subplot(1,3,2);
jsurf = surf(xms,vms,al(pi),'Parent',ax_pi);
view(0,90)
title('Politica')
shading interp
colorbar

bolean = 0*W;

ax_b = subplot(1,3,3);
T = 1;
xl_less = linspace(xl(1),xl(end),floor(Nxl/4));
vl_less = linspace(vl(1),vl(end),floor(Nvl/4));


phasep(@(s) f(s,evaluatePolicy(s,xl,vl,al,pi)),T,dt,xl_less,vl_less)
view(0,90)
title('phase portait')
shading interp
colorbar
