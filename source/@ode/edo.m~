classdef ode < handle
    %EDO % dx/dt = A*x + B*u(x)
    
    
    properties
        % Definition of differential equation 
        A   = 1         % Linear square matrix 
        B               % Matrix of control
        % 
        u               % Function control 
        %
        x0              % Initial state
        %
        x               % Solution 
        T0              % initial time
        T               % last time
        xend            % Last vector state 
        
    end
    
    methods
        function obj = edo(A,varargin)
            
            if nargin == 0
                return
            end 
            obj.A = A; 
        end
        
        function solve(obj)
            % can solve list of edos

            for iedo = obj
                % Solve only by unidimensional control
                ecuation = @(t, x) iedo.A*x + iedo.B*iedo.u(t)
                span = [ iedo.T0, iedo.T]
                
                [~, iedo.x] = ode45(ecuation,span, iedo.x0);
                iedo.xend = iedo.x(end,:);
            end
        end
        
        
    end
    %%
    methods (Static)
        function z = zeros(varargin)
          %% Zeros constructor 
             if (nargin == 0)
                z = edo;
             elseif any([varargin{:}] <= 0)
             % For zeros with any dimension <= 0   
                z = edo.empty(varargin{:});
             else
             % Use property default values
                z = repmat(edo,varargin{:});
             end
        end
    end
end

